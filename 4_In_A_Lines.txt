package 4_In_A_Lines;

import java.util.Scanner;

class Board {
	private int board[][] = new int[6][7]; //가로6 세로7인 2차원 배열

	public int winnerCheck() { //승리확인을 위한 함수
		int blackCount = 0;
		int whiteCount = 0;

		for (int x = 0; x < 6; x++) { //해당행에 같은 색깔의 바둑돌이 4개연속 확인 
			for (int y = 0; y < 7; y++) {
				if (board[x][y] == 1) {
					blackCount++;
					whiteCount = 0;
				} else if (board[x][y] == -1) {
					blackCount = 0;
					whiteCount++;
				} else if (board[x][y] == 0) {
					blackCount = 0;
					whiteCount = 0;
				}
				if (blackCount == 4)
					return 1;
				else if (whiteCount == 4)
					return -1;
			}
		}

		for (int y = 0; y < 7; y++) { //해당열에 같은 색깔의 바둑돌이 4개연속 확인 
			for (int x = 0; x < 6; x++) {
				if (board[x][y] == 1) {
					blackCount++;
					whiteCount = 0;
				} else if (board[x][y] == -1) {
					blackCount = 0;
					whiteCount++;
				} else if (board[x][y] == 0) {
					blackCount = 0;
					whiteCount = 0;
				}
				if (blackCount == 4)
					return 1;
				else if (whiteCount == 4)
					return -1;
			}
		}

		for (int x = 0; x < 6; x++) { //대각선에 같은 색깔의 바둑돌이 4개연속 확인
			for (int y = 0; y < 3; y++) {

				for (int i = 0; i < 4; i++) {
					if (board[x][y] == 1) {
						x++;
						y++;
						blackCount++;
						whiteCount = 0;
					} else if (board[x][y] == -1) {
						x++;
						y++;
						blackCount = 0;
						whiteCount++;
					} else if (board[x][y] == 0) {
						blackCount = 0;
						whiteCount = 0;
					}
					if (blackCount == 4)
						return 1;
					else if (whiteCount == 4)
						return -1;
				}
			}
		}

		for (int x = 0; x < 6; x++) { //대각선에 같은 색깔의 바둑돌이 4개연속 확인
			for (int y = 3; y < 6; y++) {

				for (int i = 0; i < 4; i++) {
					if (board[x][y] == 1) {
						x++;
						y--;
						blackCount++;
						whiteCount = 0;
					} else if (board[x][y] == -1) {
						x++;
						y++;
						blackCount = 0;
						whiteCount++;
					} else if (board[x][y] == 0) {
						blackCount = 0;
						whiteCount = 0;
					}
					if (blackCount == 4)
						return 1;
					else if (whiteCount == 4)
						return -1;
				}
			}
		}
		return 0;
	}

	public void inputStone() { //검은돌 흰돌이 번갈아가며 1~7사이의 숫자를 입력
		Scanner select = new Scanner(System.in);
		int cnt[] = new int[7];
		for (int i = 0;; i++) {
			if (i % 2 == 0)
				System.out.println("   ────── ●'s Turn ──────");
			else if (i % 2 == 1)
				System.out.println("   ────── ○'s Turn ──────");
			System.out.print("      Select(1-7) : ");
			int num;
			num = select.nextInt();
			if (num < 8) { //입력받은 num의 열갯수확인
				if (board[cnt[num - 1]][num - 1] == 0 && i % 2 == 0) {
					board[cnt[num - 1]][num - 1] = 1;
					cnt[num - 1]++;
				}

				else if (board[cnt[num - 1]][num - 1] == 0 && i % 2 == 1) {
					board[cnt[num - 1]][num - 1] = -1;
					cnt[num - 1]++;
				}
			} else if (num > 7) {
				System.out.println("잘못 입력하였습니다.");
				i++;
			}
			winnerCheck();
			if (winnerCheck() == 1 || winnerCheck() == -1)
				break;
			showStone();
		}
	}

	public void showStone() { //2차원 배열에서 반복문을 통해 해당배열에 알맞은 돌색깔, 경기판 표시
		System.out.println(" ┌────────────────────────┐");
		System.out.println(" │ Let's Play 4 In A Line │");
		System.out.println(" └────────────────────────┘");
		System.out.println("       1 2 3 4 5 6 7");

		if (board[5][0] == 1)
			System.out.print("       ●");
		else if (board[5][0] == -1)
			System.out.print("       ○");
		else
			System.out.print("       ┌");
		for (int j = 1; j < 6; j++) {
			if (board[5][j] == 1)
				System.out.print("─●");
			else if (board[5][j] == -1)
				System.out.print("─○");
			else
				System.out.print("─┬");
		}
		if (board[5][6] == 1)
			System.out.println("─●");
		else if (board[5][6] == -1)
			System.out.println("─○");
		else
			System.out.println("─┐");

		for (int i = 4; i > 0; i--) {
			if (board[i][0] == 1)
				System.out.print("       ●");
			else if (board[i][0] == -1)
				System.out.print("       ○");
			else
				System.out.print("       ├");
			for (int j = 1; j < 6; j++) {
				if (board[i][j] == 1)
					System.out.print("─●");
				else if (board[i][j] == -1)
					System.out.print("─○");
				else
					System.out.print("─┼");
			}
			if (board[i][6] == 1)
				System.out.println("─●");
			else if (board[i][6] == -1)
				System.out.println("─○");
			else
				System.out.println("─┤"); 
		}

		if (board[0][0] == 1)
			System.out.print("       ●");
		else if (board[0][0] == -1)
			System.out.print("       ○");
		else
			System.out.print("       └");
		for (int i = 1; i < 6; i++) {
			if (board[0][i] == 1)
				System.out.print("─●");
			else if (board[0][i] == -1)
				System.out.print("─○");
			else
				System.out.print("─┴");
		}
		if (board[0][6] == 1)
			System.out.println("─●");
		else if (board[0][6] == -1)
			System.out.println("─○");
		else
			System.out.println("─┘"); 
	}

	public void resetBoard() { //블럭 초기화
		for (int i = 0; i < 6; i++) {
			for (int j = 0; j < 7; j++) {
				board[i][j] = 0;
			}
		}
	}
}

public class 4_In_A_Lines {
	Scanner scanner = new Scanner(System.in);

	public static void main(String[] args) {
		Board board = new Board();

		board.showStone();

		restart: while (true) {
			board.inputStone();
			board.showStone();
			winCheck: for (;;) {
				if (board.winnerCheck() == 1)
					System.out.println("   ────── ●'s WIN! ──────");
				else if (board.winnerCheck() == -1)
					System.out.println("   ────── ○'s WIN! ──────");
				if (board.winnerCheck() == 1 || board.winnerCheck() == -1) {
					Scanner select = new Scanner(System.in);
					System.out.print("Play Again?");
					String quest = select.next();
					if (quest.equals("y")) { //y입력시 재시작
						board.resetBoard();
						board.showStone();
						continue restart;
					} else if (quest.equals("n")) { //n입력시 종료
						System.exit(0);
					} else {
						System.out.println("잘못 입력하였습니다.");
						continue winCheck;
					}
				}
			}
		}
	}
}
